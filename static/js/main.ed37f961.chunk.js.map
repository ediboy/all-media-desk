{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","output","setOutput","compute","input","newInput","replace","split","hasMultiplyAndDidision","some","element","includes","i","length","Number","splice","join","toString","calculate","parenValue","parenExist","total","className","autoFocus","onChange","e","target","value","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLA2GeA,MAzGf,WAAe,MAGWC,mBAAS,IAHpB,mBAGNC,EAHM,KAGAC,EAHA,OAIeF,mBAAS,eAJxB,mBAING,EAJM,KAIEC,EAJF,KAQPC,EAAU,SAAVA,EAAWC,GASf,IANA,IAAIC,EADJD,GADAA,EAAQA,EAAME,QAAQ,IAAK,IAAIA,QAAQ,IAAK,KAC9BC,MAAM,iBAGhBC,EAAyBH,EAASI,MAAK,SAACC,GAAD,MACzC,CAAC,IAAK,KAAKC,SAASD,MAGbE,EAAI,EAAGA,EAAIP,EAASQ,OAAQD,IAChB,KAAfP,EAASO,IAAaJ,IACxBH,EAASO,EAAI,GAAKE,OAAOT,EAASO,EAAI,IAAME,OAAOT,EAASO,EAAI,IAChEP,EAASU,OAAOH,EAAG,IAGF,KAAfP,EAASO,IAAcJ,IACzBH,EAASO,EAAI,GAAKE,OAAOT,EAASO,EAAI,IAAME,OAAOT,EAASO,EAAI,IAChEP,EAASU,OAAOH,EAAG,IAGF,KAAfP,EAASO,IAAcJ,IACzBH,EAASO,EAAI,GAAKE,OAAOT,EAASO,EAAI,IAAME,OAAOT,EAASO,EAAI,IAChEP,EAASU,OAAOH,EAAG,IAGF,KAAfP,EAASO,IAAaJ,IACxBH,EAASO,EAAI,GAAKE,OAAOT,EAASO,EAAI,IAAME,OAAOT,EAASO,EAAI,IAChEP,EAASU,OAAOH,EAAG,IAIvB,OAAIP,EAASQ,OAAS,EACbV,EAAQE,EAASW,KAAK,KAGxBX,EAASY,YAIZC,EAAY,SAAZA,EAAad,GAKjB,IAJA,IAAIe,EAAa,GACbC,GAAa,EACbf,EAAWD,EAENQ,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAUhC,GATgB,KAAZR,EAAMQ,KACRQ,GAAa,EACbD,EAAa,IAGXC,IACFD,GAAcf,EAAMQ,IAGN,KAAZR,EAAMQ,IAAaQ,EAAY,CACjC,IAAIC,EAAQlB,EAAQgB,GACpBd,EAAWA,EAASC,QAAQa,EAAYE,GACxCF,EAAa,GACbC,GAAa,EAIjB,OAAIf,EAASM,SAAS,KACbO,EAAUb,GAGZF,EAAQE,IAOjB,OACE,qBAAKiB,UAAU,4CAAf,SACE,sBAAKA,UAAU,gDAAf,UACE,mBAAGA,UAAU,mCAAb,SAAiDrB,IAEjD,uBACEqB,UAAU,yBACVC,WAAW,EACXC,SAAU,SAACC,GACTzB,EAAQyB,EAAEC,OAAOC,UAIrB,wBACEC,QAlBY,WAClB1B,EAAUgB,EAAUnB,KAkBduB,UAAU,iCAFZ,6BCpFOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ed37f961.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n  // todo: add check if parentheses are equal\n  // let input = \"(5 + 8 * (30 + 2)) * 3/8 + 3 + (3+2)\";\n  const [data, setData] = useState(\"\");\n  const [output, setOutput] = useState(\"output here\");\n\n  // compute the values\n  // make sure you process the * and / first\n  const compute = (input) => {\n    input = input.replace(\"(\", \"\").replace(\")\", \"\");\n    input = input.split(/(\\+|\\-|\\*|\\/)/);\n    var newInput = input;\n\n    var hasMultiplyAndDidision = newInput.some((element) =>\n      [\"*\", \"/\"].includes(element)\n    );\n\n    for (var i = 0; i < newInput.length; i++) {\n      if (newInput[i] == \"*\" && hasMultiplyAndDidision) {\n        newInput[i - 1] = Number(newInput[i - 1]) * Number(newInput[i + 1]);\n        newInput.splice(i, 2);\n      }\n\n      if (newInput[i] == \"+\" && !hasMultiplyAndDidision) {\n        newInput[i - 1] = Number(newInput[i - 1]) + Number(newInput[i + 1]);\n        newInput.splice(i, 2);\n      }\n\n      if (newInput[i] == \"-\" && !hasMultiplyAndDidision) {\n        newInput[i - 1] = Number(newInput[i - 1]) - Number(newInput[i + 1]);\n        newInput.splice(i, 2);\n      }\n\n      if (newInput[i] == \"/\" && hasMultiplyAndDidision) {\n        newInput[i - 1] = Number(newInput[i - 1]) / Number(newInput[i + 1]);\n        newInput.splice(i, 2);\n      }\n    }\n\n    if (newInput.length > 1) {\n      return compute(newInput.join(\"\"));\n    }\n\n    return newInput.toString();\n  };\n\n  // loop into the string and check for parentheses and process it first\n  const calculate = (input) => {\n    var parenValue = \"\";\n    var parenExist = false;\n    var newInput = input;\n\n    for (var i = 0; i < input.length; i++) {\n      if (input[i] == \"(\") {\n        parenExist = true;\n        parenValue = \"\";\n      }\n\n      if (parenExist) {\n        parenValue += input[i];\n      }\n\n      if (input[i] == \")\" && parenExist) {\n        var total = compute(parenValue);\n        newInput = newInput.replace(parenValue, total);\n        parenValue = \"\";\n        parenExist = false;\n      }\n    }\n\n    if (newInput.includes(\"(\")) {\n      return calculate(newInput);\n    }\n\n    return compute(newInput);\n  };\n\n  const handleClick = () => {\n    setOutput(calculate(data));\n  };\n\n  return (\n    <div className=\"App bg-gray-900 min-h-screen min-w-screen\">\n      <div className=\"flex justify-center flex-col max-w-md mx-auto\">\n        <p className=\"text-white p-2 mt-20 text-center\">{output}</p>\n\n        <input\n          className=\"p-2 bg-gray-200 w-full\"\n          autoFocus={true}\n          onChange={(e) => {\n            setData(e.target.value);\n          }}\n        ></input>\n\n        <button\n          onClick={handleClick}\n          className=\"bg-red-500 p-2 text-white mt-6\"\n        >\n          Calculate\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}